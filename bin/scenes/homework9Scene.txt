##############################################################################
##                                                                          ##
## This scene defines the scene used in the first 22C:151 ray tracing       ##
##    project, but has been modified to show basic usage of the OpenGL      ##
##    version of the scene file.  Please note that generally spacing does   ##
##    not matter, but each line can only contain one command.  Where a      ##
##    command either a) specifies the start or end of an object or material,##
##    or b) specifies an object/material property.                          ##
##                                                                          ##
## Comments are lines where the first non-whitespace character is a '#'.    ##
##   Typically the class constructors ignore text after a command has       ##
##   specified all its parameters, so comments can often be included at the ##
##   end of a line.  Beware, however, that not all commands are obviously   ##
##   finished, so comments at the end of lines can cause unexpected         ##
##   behaviors.  One example is that a color may have either 3 *or* 4       ##
##   components specified on a line -- including a comment after a          ##
##   3-component color may break things!                                    ##
##                                                                          ##
## Chris Wyman (3/26/2008)                                                  ##
##############################################################################

# Key/mouse bindings for various controls.  Key strokes are not case
#   sensitive.  If you want 'Q' instead of 'q', you need to map the
#   function to "shift q" instead of "q".  Shift, alt, and/or control
#   can be mapped to each key/mouse (e.g., "control alt delete") 
#   Beware that the OS may capture various shift/alt/control sequences,
#   thus the program may not receive them.
# The list of UI commands and the list of bindable keys is available
#   (and can be easily extended) by looking in 
#   "Interface/SceneFileDefinedInteraction.h"
controls
    map quit                         q
    map reload-shaders               r
    map screen-capture               f12
    map eye-trackball                mouse-left
    map light-trackball-0            mouse-right
end

# Setup a camera to view the scene
#   This needs an eye position, look-at point, up direction, field-of-view
#   in the y-axis, as well as an image resolution
#
# If you attach an OpenGL trackball to the camera, it rotates around the 
#   at position (so this is more important than in other renderers)
camera pinhole
    eye 0 5 5
    at  0 0 0 
    up  0 1 0
    fovy 60.0
    res 512 512
    trackball
end

# Defines a light source for the scene
#   A point light requires only a color and a position
#
# A trackball may be attached, though it requires a number, since
#   multiple lights may have trackballs attached.
light point
    pos   -5 5 2
    color 1 0.6 1
    trackball 0
end


# Materials defined globally like this may be
#   shared by multiple objects
material lambertian yellow
    color 1.0 1.0 0.0
end

# Defines a number of objects.  The inputs for
#   each object depends on the type of object
#
# For information about what keywords are accepted, see the constructor
#   for each type of object.  Objects can be named for reuse later 
#   (i.e., for instancing), which is mainly useful for complex mesh objects
object sphere redSphere
    center 0 1 0
    radius 1
    # All objects can define materials.  Note this one is named, as well,
    #   so it can be reused later in the file.
    material lambertian red
        color 1.0 0.0 0.0
    end
end

object sphere greenSphere
    center 3 1 -3
    radius 3
    material lambertian green
        color 0.0 1.0 0.0
    end
end

# Notice that using an already-defined, named material
#   simply requires "material <matlName>"
object sphere yellowSphere
    center -2 -3 2
    radius 2
    material yellow
end

object parallelogram bluePlane
    pt0    -125 -2 -125
    edge2  250.0 0.0 0.0
    edge1  0.0 0.0 250.0
    material shader bluePlane
        vert phongObjectShader.vert.glsl
        frag phongObjectShader.frag.glsl
        bind amb   const 0.01 0.01 0.1 1.0
        bind dif   const 0.05 0.05 0.5 1.0
        bind spec  const 0.05 0.05 0.5 1.0
        bind shiny const 50.0 0.0 0.0 0.0
        allowsShadows
    end
end

object parallelogram bluePlane
    pt0    -125 -125 -7
    edge1  250 0.0 0.0
    edge2  0.0 250 0.0
    material shader yellowPlane
        vert phongObjectShader.vert.glsl
        frag phongObjectShader.frag.glsl
        bind amb   const 0.049000 0.045000 0.0 1.0
        bind dif   const 0.346150 0.314300 0.0 1.0
        bind spec  const 0.797357 0.723991 0.0 1.0
        bind shiny const 83.2 0.0 0.0 0.0
        allowsShadows
    end
end